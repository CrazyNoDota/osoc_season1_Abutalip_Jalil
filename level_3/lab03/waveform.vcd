$version Generated by VerilatedVcd $end
$date Wed Jun 19 13:47:49 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 &! clk $end
  $var wire 16 (! din [15:0] $end
  $var wire  1 4! done $end
  $var wire 16 5! dout(0) [15:0] $end
  $var wire 16 6! dout(1) [15:0] $end
  $var wire 16 ?! dout(10) [15:0] $end
  $var wire 16 7! dout(2) [15:0] $end
  $var wire 16 8! dout(3) [15:0] $end
  $var wire 16 9! dout(4) [15:0] $end
  $var wire 16 :! dout(5) [15:0] $end
  $var wire 16 ;! dout(6) [15:0] $end
  $var wire 16 <! dout(7) [15:0] $end
  $var wire 16 =! dout(8) [15:0] $end
  $var wire 16 >! dout(9) [15:0] $end
  $var wire  1 B! regen(0) $end
  $var wire  1 C! regen(1) $end
  $var wire  1 L! regen(10) $end
  $var wire  1 D! regen(2) $end
  $var wire  1 E! regen(3) $end
  $var wire  1 F! regen(4) $end
  $var wire  1 G! regen(5) $end
  $var wire  1 H! regen(6) $end
  $var wire  1 I! regen(7) $end
  $var wire  1 J! regen(8) $end
  $var wire  1 K! regen(9) $end
  $var wire 16 )! regs(0) [15:0] $end
  $var wire 16 *! regs(1) [15:0] $end
  $var wire 16 3! regs(10) [15:0] $end
  $var wire 16 +! regs(2) [15:0] $end
  $var wire 16 ,! regs(3) [15:0] $end
  $var wire 16 -! regs(4) [15:0] $end
  $var wire 16 .! regs(5) [15:0] $end
  $var wire 16 /! regs(6) [15:0] $end
  $var wire 16 0! regs(7) [15:0] $end
  $var wire 16 1! regs(8) [15:0] $end
  $var wire 16 2! regs(9) [15:0] $end
  $var wire  1 '! reset $end
  $var wire  1 A! run $end
  $var wire  1 @! write $end
  $scope module Bitty $end
   $var wire 16 W alu_out [15:0] $end
   $var wire  4 T alu_sel [3:0] $end
   $var wire  1 N! carry_in $end
   $var wire  1 V carry_out $end
   $var wire  1 &! clk $end
   $var wire  1 M! compare $end
   $var wire 16 G d_in(0) [15:0] $end
   $var wire 16 H d_in(1) [15:0] $end
   $var wire 16 Q d_in(10) [15:0] $end
   $var wire 16 I d_in(2) [15:0] $end
   $var wire 16 J d_in(3) [15:0] $end
   $var wire 16 K d_in(4) [15:0] $end
   $var wire 16 L d_in(5) [15:0] $end
   $var wire 16 M d_in(6) [15:0] $end
   $var wire 16 N d_in(7) [15:0] $end
   $var wire 16 O d_in(8) [15:0] $end
   $var wire 16 P d_in(9) [15:0] $end
   $var wire 16 ( d_out(0) [15:0] $end
   $var wire 16 ) d_out(1) [15:0] $end
   $var wire 16 2 d_out(10) [15:0] $end
   $var wire 16 * d_out(2) [15:0] $end
   $var wire 16 + d_out(3) [15:0] $end
   $var wire 16 , d_out(4) [15:0] $end
   $var wire 16 - d_out(5) [15:0] $end
   $var wire 16 . d_out(6) [15:0] $end
   $var wire 16 / d_out(7) [15:0] $end
   $var wire 16 0 d_out(8) [15:0] $end
   $var wire 16 1 d_out(9) [15:0] $end
   $var wire 16 (! din [15:0] $end
   $var wire  1 4! done $end
   $var wire 16 5! dout(0) [15:0] $end
   $var wire 16 6! dout(1) [15:0] $end
   $var wire 16 ?! dout(10) [15:0] $end
   $var wire 16 7! dout(2) [15:0] $end
   $var wire 16 8! dout(3) [15:0] $end
   $var wire 16 9! dout(4) [15:0] $end
   $var wire 16 :! dout(5) [15:0] $end
   $var wire 16 ;! dout(6) [15:0] $end
   $var wire 16 <! dout(7) [15:0] $end
   $var wire 16 =! dout(8) [15:0] $end
   $var wire 16 >! dout(9) [15:0] $end
   $var wire  1 U mode $end
   $var wire 16 S mux_out [15:0] $end
   $var wire  3 R mux_sel [2:0] $end
   $var wire  1 n reg_en(0) $end
   $var wire  1 o reg_en(1) $end
   $var wire  1 x reg_en(10) $end
   $var wire  1 p reg_en(2) $end
   $var wire  1 q reg_en(3) $end
   $var wire  1 r reg_en(4) $end
   $var wire  1 s reg_en(5) $end
   $var wire  1 t reg_en(6) $end
   $var wire  1 u reg_en(7) $end
   $var wire  1 v reg_en(8) $end
   $var wire  1 w reg_en(9) $end
   $var wire  1 B! regen(0) $end
   $var wire  1 C! regen(1) $end
   $var wire  1 L! regen(10) $end
   $var wire  1 D! regen(2) $end
   $var wire  1 E! regen(3) $end
   $var wire  1 F! regen(4) $end
   $var wire  1 G! regen(5) $end
   $var wire  1 H! regen(6) $end
   $var wire  1 I! regen(7) $end
   $var wire  1 J! regen(8) $end
   $var wire  1 K! regen(9) $end
   $var wire 16 )! regs(0) [15:0] $end
   $var wire 16 *! regs(1) [15:0] $end
   $var wire 16 3! regs(10) [15:0] $end
   $var wire 16 +! regs(2) [15:0] $end
   $var wire 16 ,! regs(3) [15:0] $end
   $var wire 16 -! regs(4) [15:0] $end
   $var wire 16 .! regs(5) [15:0] $end
   $var wire 16 /! regs(6) [15:0] $end
   $var wire 16 0! regs(7) [15:0] $end
   $var wire 16 1! regs(8) [15:0] $end
   $var wire 16 2! regs(9) [15:0] $end
   $var wire  1 '! reset $end
   $var wire  1 A! run $end
   $var wire  1 @! write $end
   $scope module ControlUnit1 $end
    $var wire  4 T alu_sel [3:0] $end
    $var wire  1 &! clk $end
    $var wire  1 4! done $end
    $var wire  1 f en_0 $end
    $var wire  1 g en_1 $end
    $var wire  1 h en_2 $end
    $var wire  1 i en_3 $end
    $var wire  1 j en_4 $end
    $var wire  1 k en_5 $end
    $var wire  1 l en_6 $end
    $var wire  1 m en_7 $end
    $var wire  1 $ en_c $end
    $var wire  1 % en_inst $end
    $var wire  1 # en_s $end
    $var wire 16 (! instruction [15:0] $end
    $var wire  1 U mode $end
    $var wire  3 R mux_sel [2:0] $end
    $var wire  2 ' next_state [1:0] $end
    $var wire  1 '! reset $end
    $var wire  1 A! run $end
    $var wire  2 & state [1:0] $end
   $upscope $end
   $scope module alu1 $end
    $var wire 16 W alu_out [15:0] $end
    $var wire  1 e arithmetic_carry_out $end
    $var wire  1 N! carry_in $end
    $var wire  1 V carry_out $end
    $var wire  1 M! compare $end
    $var wire 16 F in_a [15:0] $end
    $var wire 16 S in_b [15:0] $end
    $var wire  1 U mode $end
    $var wire  4 T sel [3:0] $end
    $var wire 16 c temp_a_out [15:0] $end
    $var wire 16 d temp_l_out [15:0] $end
    $scope module myArithUnit $end
     $var wire 16 c alu_out [15:0] $end
     $var wire  1 N! carry_in $end
     $var wire  1 e carry_out $end
     $var wire 16 F in_a [15:0] $end
     $var wire 16 S in_b [15:0] $end
     $var wire  4 T sel [3:0] $end
    $upscope $end
    $scope module myLogicUnit $end
     $var wire 16 d alu_out [15:0] $end
     $var wire 16 F in_a [15:0] $end
     $var wire 16 S in_b [15:0] $end
     $var wire  4 T sel [3:0] $end
    $upscope $end
   $upscope $end
   $scope module mux1 $end
    $var wire 16 S out [15:0] $end
    $var wire 16 > reg0 [15:0] $end
    $var wire 16 ? reg1 [15:0] $end
    $var wire 16 @ reg2 [15:0] $end
    $var wire 16 A reg3 [15:0] $end
    $var wire 16 B reg4 [15:0] $end
    $var wire 16 C reg5 [15:0] $end
    $var wire 16 D reg6 [15:0] $end
    $var wire 16 E reg7 [15:0] $end
    $var wire  3 R sel [2:0] $end
   $upscope $end
   $scope module reg0 $end
    $var wire  1 &! clk $end
    $var wire  1 { enable $end
    $var wire 16 Z in [15:0] $end
    $var wire 16 5 out [15:0] $end
   $upscope $end
   $scope module reg1 $end
    $var wire  1 &! clk $end
    $var wire  1 | enable $end
    $var wire 16 [ in [15:0] $end
    $var wire 16 6 out [15:0] $end
   $upscope $end
   $scope module reg2 $end
    $var wire  1 &! clk $end
    $var wire  1 } enable $end
    $var wire 16 \ in [15:0] $end
    $var wire 16 7 out [15:0] $end
   $upscope $end
   $scope module reg3 $end
    $var wire  1 &! clk $end
    $var wire  1 ~ enable $end
    $var wire 16 ] in [15:0] $end
    $var wire 16 8 out [15:0] $end
   $upscope $end
   $scope module reg4 $end
    $var wire  1 &! clk $end
    $var wire  1 !! enable $end
    $var wire 16 ^ in [15:0] $end
    $var wire 16 9 out [15:0] $end
   $upscope $end
   $scope module reg5 $end
    $var wire  1 &! clk $end
    $var wire  1 "! enable $end
    $var wire 16 _ in [15:0] $end
    $var wire 16 : out [15:0] $end
   $upscope $end
   $scope module reg6 $end
    $var wire  1 &! clk $end
    $var wire  1 #! enable $end
    $var wire 16 ` in [15:0] $end
    $var wire 16 ; out [15:0] $end
   $upscope $end
   $scope module reg7 $end
    $var wire  1 &! clk $end
    $var wire  1 $! enable $end
    $var wire 16 a in [15:0] $end
    $var wire 16 < out [15:0] $end
   $upscope $end
   $scope module regC $end
    $var wire  1 &! clk $end
    $var wire  1 y enable $end
    $var wire 16 X in [15:0] $end
    $var wire 16 3 out [15:0] $end
   $upscope $end
   $scope module regS $end
    $var wire  1 &! clk $end
    $var wire  1 z enable $end
    $var wire 16 Y in [15:0] $end
    $var wire 16 4 out [15:0] $end
   $upscope $end
   $scope module reg_inst $end
    $var wire  1 &! clk $end
    $var wire  1 %! enable $end
    $var wire 16 b in [15:0] $end
    $var wire 16 = out [15:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
0%
b00 &
b01 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
b0000000000000000 B
b0000000000000000 C
b0000000000000000 D
b0000000000000000 E
b0000000000000000 F
b0000000000000000 G
b0000000000000000 H
b0000000010000110 I
b0010000011011001 J
b0000111011010011 K
b0010001100110011 L
b0010001000100011 M
b0001100001111010 N
b0000000100101011 O
b0000111100101000 P
b0000000000000000 Q
b101 R
b0000000000000000 S
b0000 T
0U
0V
b0000000000000000 W
b0000000000000000 X
b0000000000000000 Y
b0000000010000110 Z
b0010000011011001 [
b0000111011010011 \
b0010001100110011 ]
b0010001000100011 ^
b0001100001111010 _
b0000000100101011 `
b0000111100101000 a
b0000000000000000 b
b0000000000000000 c
b1111111111111111 d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
b1010000000010000 (!
b0000000000000000 )!
b0000000000000000 *!
b0000000010000110 +!
b0010000011011001 ,!
b0000111011010011 -!
b0010001100110011 .!
b0010001000100011 /!
b0001100001111010 0!
b0000000100101011 1!
b0000111100101000 2!
b0000000000000000 3!
04!
b0000000000000000 5!
b0000000000000000 6!
b0000000000000000 7!
b0000000000000000 8!
b0000000000000000 9!
b0000000000000000 :!
b0000000000000000 ;!
b0000000000000000 <!
b0000000000000000 =!
b0000000000000000 >!
b0000000000000000 ?!
0@!
0A!
0B!
0C!
1D!
1E!
1F!
1G!
1H!
1I!
1J!
1K!
0L!
1M!
0N!
#1
0#
1$
b01 &
b10 '
b1111111111111111 H
b000 R
b0010 T
b1111111111111111 W
b1111111111111111 X
b1111111111111111 c
b0000000000000000 d
1o
1y
1&!
#2
0o
0y
0&!
#3
1%
b10 &
b11 '
1k
1o
1u
1x
1y
1"!
1%!
1&!
14!
#4
0o
0x
0y
0%!
0&!
#5
b11 &
b00 '
b0001100001111010 /
b0001100001111010 :
b0001100001111010 C
1o
1x
1y
1%!
1&!
b0001100001111010 <!
#6
0o
0x
0y
0%!
0&!
#7
1#
0$
0%
b00 &
b01 '
b1110011110000101 H
b101 R
b0001100001111010 S
b1110011110000101 W
b1110011110000101 X
b1110011110000101 c
b0001100001111010 d
0k
1n
0u
1z
0"!
1&!
04!
0M!
#8
0n
0z
0&!
#9
0#
1$
b01 &
b10 '
b1111111111111111 H
b000 R
b0000000000000000 S
b1111111111111111 W
b1111111111111111 X
b1111111111111111 c
b0000000000000000 d
1o
1y
1&!
1M!
