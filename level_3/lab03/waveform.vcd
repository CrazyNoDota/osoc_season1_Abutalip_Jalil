$version Generated by VerilatedVcd $end
$date Wed Jun 12 23:43:47 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 '! clk $end
  $var wire 16 )! din [15:0] $end
  $var wire  1 5! done $end
  $var wire 16 6! dout(0) [15:0] $end
  $var wire 16 7! dout(1) [15:0] $end
  $var wire 16 @! dout(10) [15:0] $end
  $var wire 16 8! dout(2) [15:0] $end
  $var wire 16 9! dout(3) [15:0] $end
  $var wire 16 :! dout(4) [15:0] $end
  $var wire 16 ;! dout(5) [15:0] $end
  $var wire 16 <! dout(6) [15:0] $end
  $var wire 16 =! dout(7) [15:0] $end
  $var wire 16 >! dout(8) [15:0] $end
  $var wire 16 ?! dout(9) [15:0] $end
  $var wire  1 C! regen(0) $end
  $var wire  1 D! regen(1) $end
  $var wire  1 M! regen(10) $end
  $var wire  1 E! regen(2) $end
  $var wire  1 F! regen(3) $end
  $var wire  1 G! regen(4) $end
  $var wire  1 H! regen(5) $end
  $var wire  1 I! regen(6) $end
  $var wire  1 J! regen(7) $end
  $var wire  1 K! regen(8) $end
  $var wire  1 L! regen(9) $end
  $var wire 16 *! regs(0) [15:0] $end
  $var wire 16 +! regs(1) [15:0] $end
  $var wire 16 4! regs(10) [15:0] $end
  $var wire 16 ,! regs(2) [15:0] $end
  $var wire 16 -! regs(3) [15:0] $end
  $var wire 16 .! regs(4) [15:0] $end
  $var wire 16 /! regs(5) [15:0] $end
  $var wire 16 0! regs(6) [15:0] $end
  $var wire 16 1! regs(7) [15:0] $end
  $var wire 16 2! regs(8) [15:0] $end
  $var wire 16 3! regs(9) [15:0] $end
  $var wire  1 (! reset $end
  $var wire  1 B! run $end
  $var wire  1 A! write $end
  $scope module Bitty $end
   $var wire 16 n alu_out [15:0] $end
   $var wire  4 k alu_sel [3:0] $end
   $var wire  1 N! carry_in $end
   $var wire  1 m carry_out $end
   $var wire  1 '! clk $end
   $var wire  1 R compare $end
   $var wire 16 ^ d_in(0) [15:0] $end
   $var wire 16 _ d_in(1) [15:0] $end
   $var wire 16 h d_in(10) [15:0] $end
   $var wire 16 ` d_in(2) [15:0] $end
   $var wire 16 a d_in(3) [15:0] $end
   $var wire 16 b d_in(4) [15:0] $end
   $var wire 16 c d_in(5) [15:0] $end
   $var wire 16 d d_in(6) [15:0] $end
   $var wire 16 e d_in(7) [15:0] $end
   $var wire 16 f d_in(8) [15:0] $end
   $var wire 16 g d_in(9) [15:0] $end
   $var wire 16 # d_out(0) [15:0] $end
   $var wire 16 $ d_out(1) [15:0] $end
   $var wire 16 - d_out(10) [15:0] $end
   $var wire 16 % d_out(2) [15:0] $end
   $var wire 16 & d_out(3) [15:0] $end
   $var wire 16 ' d_out(4) [15:0] $end
   $var wire 16 ( d_out(5) [15:0] $end
   $var wire 16 ) d_out(6) [15:0] $end
   $var wire 16 * d_out(7) [15:0] $end
   $var wire 16 + d_out(8) [15:0] $end
   $var wire 16 , d_out(9) [15:0] $end
   $var wire 16 )! din [15:0] $end
   $var wire  1 5! done $end
   $var wire 16 6! dout(0) [15:0] $end
   $var wire 16 7! dout(1) [15:0] $end
   $var wire 16 @! dout(10) [15:0] $end
   $var wire 16 8! dout(2) [15:0] $end
   $var wire 16 9! dout(3) [15:0] $end
   $var wire 16 :! dout(4) [15:0] $end
   $var wire 16 ;! dout(5) [15:0] $end
   $var wire 16 <! dout(6) [15:0] $end
   $var wire 16 =! dout(7) [15:0] $end
   $var wire 16 >! dout(8) [15:0] $end
   $var wire 16 ?! dout(9) [15:0] $end
   $var wire  1 l mode $end
   $var wire 16 j mux_out [15:0] $end
   $var wire  3 i mux_sel [2:0] $end
   $var wire  1 G reg_en(0) $end
   $var wire  1 H reg_en(1) $end
   $var wire  1 Q reg_en(10) $end
   $var wire  1 I reg_en(2) $end
   $var wire  1 J reg_en(3) $end
   $var wire  1 K reg_en(4) $end
   $var wire  1 L reg_en(5) $end
   $var wire  1 M reg_en(6) $end
   $var wire  1 N reg_en(7) $end
   $var wire  1 O reg_en(8) $end
   $var wire  1 P reg_en(9) $end
   $var wire  1 C! regen(0) $end
   $var wire  1 D! regen(1) $end
   $var wire  1 M! regen(10) $end
   $var wire  1 E! regen(2) $end
   $var wire  1 F! regen(3) $end
   $var wire  1 G! regen(4) $end
   $var wire  1 H! regen(5) $end
   $var wire  1 I! regen(6) $end
   $var wire  1 J! regen(7) $end
   $var wire  1 K! regen(8) $end
   $var wire  1 L! regen(9) $end
   $var wire 16 *! regs(0) [15:0] $end
   $var wire 16 +! regs(1) [15:0] $end
   $var wire 16 4! regs(10) [15:0] $end
   $var wire 16 ,! regs(2) [15:0] $end
   $var wire 16 -! regs(3) [15:0] $end
   $var wire 16 .! regs(4) [15:0] $end
   $var wire 16 /! regs(5) [15:0] $end
   $var wire 16 0! regs(6) [15:0] $end
   $var wire 16 1! regs(7) [15:0] $end
   $var wire 16 2! regs(8) [15:0] $end
   $var wire 16 3! regs(9) [15:0] $end
   $var wire  1 (! reset $end
   $var wire  1 B! run $end
   $var wire  1 A! write $end
   $scope module ControlUnit1 $end
    $var wire  4 k alu_sel [3:0] $end
    $var wire  1 '! clk $end
    $var wire  1 5! done $end
    $var wire  1 } en_0 $end
    $var wire  1 ~ en_1 $end
    $var wire  1 !! en_2 $end
    $var wire  1 "! en_3 $end
    $var wire  1 #! en_4 $end
    $var wire  1 $! en_5 $end
    $var wire  1 %! en_6 $end
    $var wire  1 &! en_7 $end
    $var wire  1 C en_c $end
    $var wire  1 D en_inst $end
    $var wire  1 B en_s $end
    $var wire 16 )! instruction [15:0] $end
    $var wire  1 l mode $end
    $var wire  3 i mux_sel [2:0] $end
    $var wire  2 F next_state [1:0] $end
    $var wire  1 (! reset $end
    $var wire  1 B! run $end
    $var wire  2 E state [1:0] $end
   $upscope $end
   $scope module alu1 $end
    $var wire 16 n alu_out [15:0] $end
    $var wire  1 | arithmetic_carry_out $end
    $var wire  1 N! carry_in $end
    $var wire  1 m carry_out $end
    $var wire  1 R compare $end
    $var wire 16 A in_a [15:0] $end
    $var wire 16 j in_b [15:0] $end
    $var wire  1 l mode $end
    $var wire  4 k sel [3:0] $end
    $var wire 16 z temp_a_out [15:0] $end
    $var wire 16 { temp_l_out [15:0] $end
    $scope module myArithUnit $end
     $var wire 16 z alu_out [15:0] $end
     $var wire  1 N! carry_in $end
     $var wire  1 | carry_out $end
     $var wire 16 A in_a [15:0] $end
     $var wire 16 j in_b [15:0] $end
     $var wire  4 k sel [3:0] $end
    $upscope $end
    $scope module myLogicUnit $end
     $var wire 16 { alu_out [15:0] $end
     $var wire 16 A in_a [15:0] $end
     $var wire 16 j in_b [15:0] $end
     $var wire  4 k sel [3:0] $end
    $upscope $end
   $upscope $end
   $scope module mux1 $end
    $var wire 16 j out [15:0] $end
    $var wire 16 9 reg0 [15:0] $end
    $var wire 16 : reg1 [15:0] $end
    $var wire 16 ; reg2 [15:0] $end
    $var wire 16 < reg3 [15:0] $end
    $var wire 16 = reg4 [15:0] $end
    $var wire 16 > reg5 [15:0] $end
    $var wire 16 ? reg6 [15:0] $end
    $var wire 16 @ reg7 [15:0] $end
    $var wire  3 i sel [2:0] $end
   $upscope $end
   $scope module reg0 $end
    $var wire  1 '! clk $end
    $var wire  1 U enable $end
    $var wire 16 q in [15:0] $end
    $var wire 16 0 out [15:0] $end
   $upscope $end
   $scope module reg1 $end
    $var wire  1 '! clk $end
    $var wire  1 V enable $end
    $var wire 16 r in [15:0] $end
    $var wire 16 1 out [15:0] $end
   $upscope $end
   $scope module reg2 $end
    $var wire  1 '! clk $end
    $var wire  1 W enable $end
    $var wire 16 s in [15:0] $end
    $var wire 16 2 out [15:0] $end
   $upscope $end
   $scope module reg3 $end
    $var wire  1 '! clk $end
    $var wire  1 X enable $end
    $var wire 16 t in [15:0] $end
    $var wire 16 3 out [15:0] $end
   $upscope $end
   $scope module reg4 $end
    $var wire  1 '! clk $end
    $var wire  1 Y enable $end
    $var wire 16 u in [15:0] $end
    $var wire 16 4 out [15:0] $end
   $upscope $end
   $scope module reg5 $end
    $var wire  1 '! clk $end
    $var wire  1 Z enable $end
    $var wire 16 v in [15:0] $end
    $var wire 16 5 out [15:0] $end
   $upscope $end
   $scope module reg6 $end
    $var wire  1 '! clk $end
    $var wire  1 [ enable $end
    $var wire 16 w in [15:0] $end
    $var wire 16 6 out [15:0] $end
   $upscope $end
   $scope module reg7 $end
    $var wire  1 '! clk $end
    $var wire  1 \ enable $end
    $var wire 16 x in [15:0] $end
    $var wire 16 7 out [15:0] $end
   $upscope $end
   $scope module regC $end
    $var wire  1 '! clk $end
    $var wire  1 S enable $end
    $var wire 16 o in [15:0] $end
    $var wire 16 . out [15:0] $end
   $upscope $end
   $scope module regS $end
    $var wire  1 '! clk $end
    $var wire  1 T enable $end
    $var wire 16 p in [15:0] $end
    $var wire 16 / out [15:0] $end
   $upscope $end
   $scope module reg_inst $end
    $var wire  1 '! clk $end
    $var wire  1 ] enable $end
    $var wire 16 y in [15:0] $end
    $var wire 16 8 out [15:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
b0000000000000000 $
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
1B
0C
0D
b00 E
b01 F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
1R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
b0000000000000000 ^
b0000000000000000 _
b0000001100010011 `
b0010010101111101 a
b0001001001000010 b
b0010001101001100 c
b0001000001010101 d
b0000100101101011 e
b0000110100001010 f
b0000101010101011 g
b0000000000000000 h
b010 i
b0000000000000000 j
b0000 k
0l
0m
b0000000000000000 n
b0000000000000000 o
b0000000000000000 p
b0000001100010011 q
b0010010101111101 r
b0001001001000010 s
b0010001101001100 t
b0001000001010101 u
b0000100101101011 v
b0000110100001010 w
b0000101010101011 x
b0000000000000000 y
b0000000000000000 z
b1111111111111111 {
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
b0101000000001100 )!
b0000000000000000 *!
b0000000000000000 +!
b0000001100010011 ,!
b0010010101111101 -!
b0001001001000010 .!
b0010001101001100 /!
b0001000001010101 0!
b0000100101101011 1!
b0000110100001010 2!
b0000101010101011 3!
b0000000000000000 4!
05!
b0000000000000000 6!
b0000000000000000 7!
b0000000000000000 8!
b0000000000000000 9!
b0000000000000000 :!
b0000000000000000 ;!
b0000000000000000 <!
b0000000000000000 =!
b0000000000000000 >!
b0000000000000000 ?!
b0000000000000000 @!
0A!
0B!
0C!
0D!
1E!
1F!
1G!
1H!
1I!
1J!
1K!
0L!
0M!
0N!
#1
0B
1C
b01 E
b10 F
b1111111111111111 _
b100 i
b0001 k
1l
b1111111111111111 n
b1111111111111111 o
1'!
#2
0'!
#3
1D
b10 E
b11 F
1K
1W
1!!
1'!
15!
#4
0'!
#5
b0001001001000010 '
b0001001001000010 2
b0001001001000010 ;
b11 E
b00 F
1'!
b0001001001000010 :!
#6
0'!
#7
1B
0C
0D
b00 E
b01 F
0K
0R
0W
b1110110110111101 _
b010 i
b0001001001000010 j
b1110110110111101 n
b1110110110111101 o
b0001001001000010 z
b1110110110111101 {
0!!
1'!
05!
#8
0'!
#9
0B
1C
b01 E
b10 F
1R
b1111111111111111 _
b100 i
b0000000000000000 j
b1111111111111111 n
b1111111111111111 o
b0000000000000000 z
b1111111111111111 {
1'!
